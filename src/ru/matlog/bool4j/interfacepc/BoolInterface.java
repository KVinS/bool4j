/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ru.matlog.bool4j.interfacepc;

import com.danilov.bool4j.util.Util;
import com.danilov.bool4j.util.VariablesSet;
import com.danilov.converter.Converter;
import com.danilov.converter.SDNFConverter;
import com.danilov.converter.JPolynomConverter;
import com.danilov.converter.SKNFConverter;
import java.awt.Dimension;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.event.TableModelListener;
import javax.swing.table.TableModel;
import ru.matlog.bool4j.expression.Calculable;
import ru.matlog.bool4j.expression.Expression;
import ru.matlog.bool4j.expression.RecursiveCalculableFactoryImpl;
import ru.matlog.bool4j.parser.Parser;
import ru.matlog.bool4j.parser.RecursiveParserImpl;

/**
 *
 * @author Эдуард
 */
public class BoolInterface extends javax.swing.JFrame {

    /**
     * Creates new form BoolInterface
     */
    public BoolInterface() {
        initComponents();
        jTabbedPane1.setVisible(false);
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BoolInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BoolInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BoolInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BoolInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BoolInterface().setVisible(true);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        tableButton = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Bool4j");

        jTextField1.setToolTipText("Введите сюда желаемое логическое выражение");

        tableButton.setText("Анализировать выражение");
        tableButton.setToolTipText("Построить таблицу истинности соответствующую данному логическому выражению, найти КНФ и ДНФ");
        tableButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tableButtonActionPerformed(evt);
            }
        });

        jTabbedPane1.setToolTipText("Таблица истинности");
        jTabbedPane1.setName(""); // NOI18N

        jScrollPane2.setToolTipText("Таблица истинности в виде таблицы");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTable1);

        jTabbedPane1.addTab("Таблица истинности", jScrollPane2);

        jScrollPane1.setToolTipText("Таблица истинности выражения, СКНФ, СДНФ в виде текстового файла");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jTabbedPane1.addTab("Результат анализа", jScrollPane1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jTextField1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tableButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 404, Short.MAX_VALUE)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tableButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 410, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tableButton.getAccessibleContext().setAccessibleDescription("Построить таблицу истинности соответствующую данному логическому выражению, найти СКНФ и СДНФ");

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private Parser p = new RecursiveParserImpl();
    private void tableButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tableButtonActionPerformed

        String input = jTextField1.getText();
        input = input.trim();
        if (!input.equals("")) {
            //System.out.println(input.split("(").length+ " " + input.split(")").length);

            if (Util.bracketValidator(input)) {
                try {
                    jTabbedPane1.setVisible(true);
                    Expression exp = p.parse(jTextField1.getText());
                    String result = new String();
                    result += ("Выражение: " + exp.toString() + "\n\nТаблица истинности:\n");
                    Parser p = new RecursiveParserImpl();

                    Calculable calc = exp.toCalculable(new RecursiveCalculableFactoryImpl());
                    VariablesSet varSet = new VariablesSet(calc.getVariableNames());
                    List<String> vv = varSet.getKeySet();
                    String[] title = new String[vv.size() + 1];
                    String[][] results = new String[(int) Math.pow(2, vv.size())][vv.size() + 1];
                    int i = 0;
                    for (String key : vv) {
                        title[i++] = key;
                        result += (key + " ");
                    }
                    title[i] = "f";

                    result += ("f\n");

                    int x = 0;
                    int y = 0;


                    while (varSet.notEnd()) {
                        Map<String, Boolean> m = varSet.get();
                        calc.with(m);
                        for (String key : vv) {
                            Boolean var = m.get(key);
                            String s;
                            if (var) {
                                s = "1";
                            } else {
                                s = "0";
                            }
                            //System.out.println(y+":"+x+"="+s);
                            results[y][x++] = s;
                            result += (s + " ");
                        }
                        Boolean val = calc.calculate();
                        String s;
                        if (val) {
                            s = "1";
                        } else {
                            s = "0";
                        }
                        results[y++][x] = s;
                        x = 0;
                        result += (s + "\n");
                        result += ("");
                        varSet.moveToNext();
                    }




                    Converter c = new SDNFConverter();
                    Expression exp1 = c.convert(exp);
                    if (exp1 != null) {
                        result += ("\nСДНФ: " + exp1.toString());
                    }
                    c = new SKNFConverter();
                    exp1 = c.convert(exp);
                    if (exp1 != null) {
                        result += ("\n\nСКНФ: " + exp1.toString());
                    }
                    c = new JPolynomConverter();
                    exp1 = c.convert(exp);
                    if (exp1 != null) {
                        result += ("\n\nЖегалкин: " + exp1.toString());
                    }

                    jTextArea1.setText(result);
                    jTable1.setModel(new javax.swing.table.DefaultTableModel(
                            results,
                            title) {
                        public boolean isCellEditable(int rowIndex, int columnIndex) {
                            return false;
                        }
                    });

                    jScrollPane2.setViewportView(jTable1);
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this,
                            "Сёма уже работает над этой исправлением ошибки! Или Макс. Или Эдик.",
                            "Известная ошибка!",
                            JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this,
                        "Скобка, скобка, скобка... (",
                        "Ошибка ввода!",
                        JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this,
                    "Пустое поле ввода",
                    "Ошибка ввода!",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_tableButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JButton tableButton;
    // End of variables declaration//GEN-END:variables
}